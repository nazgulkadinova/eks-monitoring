# apiVersion: v1
# kind: Namespace
# metadata:
#   name: {{ .Values.Namespace.name }}
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: {{ .Values.configMap.name }}
#   labels:
#     name: {{ .Values.configMap.name }}
#   namespace: {{ .Values.configMap.namespace }}
# data:
#   prometheus.yml: |-
#     global:
#       scrape_interval: {{ .Values.configMap.scrape_interval }}
#       evaluation_interval: {{ .Values.configMap.evaluation_interval }}
#     scrape_configs:
#       - job_name: 'kubernetes-apiservers'
#         kubernetes_sd_configs:
#         - role: endpoints
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
#           action: keep
#           regex: default;kubernetes;https
#       - job_name: 'kubernetes-nodes'
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         kubernetes_sd_configs:
#         - role: node
#         relabel_configs:
#         - action: labelmap
#           regex: __meta_kubernetes_node_label_(.+)
#         - target_label: __address__
#           replacement: kubernetes.default.svc:443
#         - source_labels: [__meta_kubernetes_node_name]
#           regex: (.+)
#           target_label: __metrics_path__
#           replacement: /api/v1/nodes/${1}/proxy/metrics
#       - job_name: 'kubernetes-pods'
#         kubernetes_sd_configs:
#         - role: pod
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
#           action: keep
#           regex: true
#         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
#           action: replace
#           target_label: __metrics_path__
#           regex: (.+)
#         - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
#           action: replace
#           regex: ([^:]+)(?::\d+)?;(\d+)
#           replacement: $1:$2
#           target_label: __address__
#         - action: labelmap
#           regex: __meta_kubernetes_pod_label_(.+)
#         - source_labels: [__meta_kubernetes_namespace]
#           action: replace
#           target_label: kubernetes_namespace
#         - source_labels: [__meta_kubernetes_pod_name]
#           action: replace
#           target_label: kubernetes_pod_name
#         metric_relabel_configs:
#         - source_labels: [envoy_cluster_name]
#           regex: '(.+?)\/(.+?)\/(.*)'
#           action: replace
#           target_label: namespace
#           replacement: '$1'
#         - source_labels: [envoy_cluster_name]
#           regex: '(.+?)\/(.+?)\/(.*)'
#           action: replace
#           target_label: service
#           replacement: '$2'
#         - source_labels: [envoy_cluster_name]
#           regex: '(.+?)\/(.+?)\/(.*)'
#           action: replace
#           target_label: port
#           replacement: '$3'          
#       - job_name: 'kubernetes-cadvisor'
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         kubernetes_sd_configs:
#         - role: node
#         relabel_configs:
#         - action: labelmap
#           regex: __meta_kubernetes_node_label_(.+)
#         - target_label: __address__
#           replacement: kubernetes.default.svc:443
#         - source_labels: [__meta_kubernetes_node_name]
#           regex: (.+)
#           target_label: __metrics_path__
#           replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
#       - job_name: 'kubernetes-service-endpoints'
#         kubernetes_sd_configs:
#         - role: endpoints
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
#           action: keep
#           regex: true
#         - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
#           action: replace
#           target_label: __scheme__
#           regex: (https?)
#         - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
#           action: replace
#           target_label: __metrics_path__
#           regex: (.+)
#         - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
#           action: replace
#           target_label: __address__
#           regex: ([^:]+)(?::\d+)?;(\d+)
#           replacement: $1:$2
#         - action: labelmap
#           regex: __meta_kubernetes_service_label_(.+)
#         - source_labels: [__meta_kubernetes_namespace]
#           action: replace
#           target_label: kubernetes_namespace
#         - source_labels: [__meta_kubernetes_service_name]
#           action: replace
#           target_label: kubernetes_name
# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   labels:
#      app: {{ .Values.serviceAccount.app }}  
#   name: {{ .Values.serviceAccount.name }}
#   namespace: {{ .Values.serviceAccount.namespace }}
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: {{ .Values.clusterRole.name }}
# rules:
# - apiGroups: [""]
#   resources:
#   - nodes
#   - nodes/proxy
#   - services
#   - endpoints
#   - pods
#   verbs: ["get", "list", "watch"]
# - apiGroups:
#   - extensions
#   resources:
#   - ingresses
#   verbs: ["get", "list", "watch"]
# - nonResourceURLs: ["/metrics"]
#   verbs: ["get"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: {{ .Values.clusterRoleBinding.name }}
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: {{ .Values.clusterRoleBinding.name }}
# subjects:
# - kind: ServiceAccount
#   name: {{ .Values.serviceAccount.name }}
#   namespace: {{ .Values.serviceAccount.namespace }}
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata: 
#   name: {{ .Values.persistentVolumeClaim.name }}
#   namespace: {{ .Values.persistentVolumeClaim.namespace }}
# spec: 
#   accessModes: {{ .Values.persistentVolumeClaim.accessModes }}    
#   resources:
#     requests:
#       storage: {{ .Values.persistentVolumeClaim.storage }}
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: {{ .Values.deployment.name }}
#   namespace: {{ .Values.deployment.namespace }}
#   labels:
#     app: {{ .Values.deployment.app }}
# spec:
#   replicas: {{ .Values.deployment.replicaCount }}
#   strategy:
#     type: RollingUpdate
#     rollingUpdate:
#       maxUnavailable: 1
#   selector:
#     matchLabels:
#       app: {{ .Values.deployment.app }}
#   template:
#     metadata:
#       labels:
#         app: {{ .Values.deployment.app }}
#       annotations: 
#         prometheus.io/scrape: "true"
#         prometheus.io/path: "/metrics"
#         prometheus.io/port: "9090"
#     spec:
#       serviceAccountName: {{ .Values.deployment.serviceAccountName }}
#       containers:
#         - name: {{ .Values.deployment.container.name }}
#           image: {{ .Values.deployment.container.image }}
#           args:
#             - "{{ .Values.deployment.container.args }}"
#           ports:
#           {{- range .Values.deployment.container.ports }}
#             - containerPort: {{ .containerPort }}
#           {{- end }} 
#           volumeMounts:
#           {{- range .Values.deployment.container.volumeMounts }}
#             - name: {{ .name }}
#               mountPath: {{ .mountPath }}
#           {{- end }} 
#       terminationGracePeriodSeconds: 300
#       restartPolicy: Always      
#       volumes:
#       {{- range .Values.deployment.volumes }}
#         - name: {{ .name }}
#         {{- if .configMap }}
#           configMap:
#             defaultMode: {{ .configMap.defaultMode }}
#             name: {{ .configMap.name }}
#         {{- else if .persistentVolumeClaim }}
#           persistentVolumeClaim:
#             claimName: {{ .persistentVolumeClaim.claimName }}
#         {{- end }}
#       {{- end }}
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: {{ .Values.service.name }}
#   namespace: {{ .Values.service.namespace }}
# spec:
#   selector:
#     app: {{ .Values.service.app }}
#   ports:
#   {{- range .Values.service.ports }}
#     - name: {{ .name }}
#       port: {{ .port }}
#       targetPort: {{ .targetPort }}
#   {{- end }}